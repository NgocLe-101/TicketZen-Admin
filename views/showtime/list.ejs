

<div class="container mx-auto py-6">
  <!-- Header -->
  <h1 class="text-2xl font-bold text-gray-800 mb-4">Showtime Listings</h1>

  <!-- Filters & Actions -->
  <div class="flex flex-wrap items-center justify-between mb-6">
    <div class="bg-white shadow-lg rounded-lg p-4 mb-6">
        <form id="filter-form" class="flex gap-4">
          <input
            type="text"
            id="search"
            name="search"
            value="<%= filters.search %>"
            placeholder="Search by movie title"
            class="border rounded px-3 py-2 flex-1"
          />
  
          <select id="screen" name="screen" class="border rounded px-3 py-2">
            <option value="all">All Screens</option>
            <% screens.forEach(screen => { %>
              <option value="<%= screen.id %>" <%= filters.screen === screen.id ? 'selected' : '' %>>
                <%= screen.name %>
              </option>
            <% }); %>
          </select>
  
          <select id="sortBy" name="sortBy" class="border rounded px-3 py-2">
            <option value="created_at" <%= filters.sortBy === 'created_at' ? 'selected' : '' %>>Creation Time</option>
            <option value="start_time" <%= filters.sortBy === 'start_time' ? 'selected' : '' %>>Start Time</option>
          </select>
  
          <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg">Filter</button>
        </form>
      </div>

    <!-- Add Showtime Button -->
    <button 
      id="addShowtime"
      class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
    >
      Add Showtime
    </button>
  </div>

  <!-- Table -->
  <div class="bg-white shadow rounded overflow-hidden">
    <table class="table-auto w-full border-collapse border border-gray-200">
      <thead class="bg-gray-100">
        <tr>
          <th class="border px-4 py-2">ID</th>
          <th class="border px-4 py-2">Movie</th>
          <th class="border px-4 py-2">Screen</th>
          <th class="border px-4 py-2">Start Time</th>
          <th class="border px-4 py-2">End Time</th>
          <th class="border px-4 py-2">Price</th>
          <th class="border px-4 py-2">Actions</th>
        </tr>
      </thead>
      <tbody>
        <% showtimes.forEach(showtime => { %>
          <tr>
            <td class="border px-4 py-2"><%= showtime.id %></td>
            <td class="border px-4 py-2"><%= showtime.movie_title %></td>
            <td class="border px-4 py-2"><%= showtime.screen_name %></td>
            <td class="border px-4 py-2"><%= showtime.start_time %></td>
            <td class="border px-4 py-2"><%= showtime.start_time  %></td>
            <td class="border px-4 py-2"><%= showtime.price %></td>
            <td class="border px-4 py-2 space-x-2">
              <button 
                class="px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                onclick="editShowtime(<%= showtime.id %>)"
              >
                Edit
              </button>
              <button 
                class="px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                onclick="deleteShowtime(<%= showtime.id %>)"
              >
                Delete
              </button>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div id="pagination" class="mt-4 flex justify-center">
    <% for (let i = 1; i <= pagination.total; i++) { %>
      <button
        class="px-4 py-2 border <%= pagination.current == i ? 'bg-gray-300' : '' %>"
        onclick="changePage(<%= i %>)"
      >
        <%= i %>
      </button>
    <% } %>
  </div>

  <!-- Add/Edit Modal -->
  <div id="showtimeModal" class="fixed inset-0 bg-black bg-opacity-50 hidden">
    <div class="flex items-center justify-center h-screen">
      <div class="bg-white p-6 rounded-lg w-1/2">
        <h2 id="modalTitle" class="text-xl font-bold mb-4">Add New Showtime</h2>
        <form id="showtimeForm" onsubmit="handleSubmit(event)">
          <input type="hidden" id="showtime_id" name="id">
          
          <div class="mb-4">
            <label>Movie</label>
            <select name="movie_id" id="movie_id" class="w-full border rounded px-3 py-2" required>
              <% movies.forEach(movie => { %>
                <option value="<%= movie.id %>" data-duration="<%= movie.duration %>"><%= movie.title %></option>
              <% }); %>
            </select>
          </div>

          <div class="mb-4">
            <label>Screen</label>
            <select name="screen_id" id="screen_id" class="w-full border rounded px-3 py-2" required>
              <% screens.forEach(screen => { %>
                <option value="<%= screen.id %>"><%= screen.name %></option>
              <% }); %>
            </select>
          </div>

          <div class="mb-4">
            <label>Start Time</label>
            <input type="datetime-local" name="start_time" id="start_time" class="w-full border rounded px-3 py-2" required>
          </div>

          <div class="mb-4">
            <label>End Time</label>
            <input type="datetime-local" name="end_time" id="end_time" disabled="true" class="w-full border rounded px-3 py-2" required>
          </div>

          <div class="mb-4">
            <label>Price</label>
            <input type="number" name="price" id="price" class="w-full border rounded px-3 py-2 before:content-['đ']" required min="1000" step="1000">
          </div>

          <div class="flex justify-end gap-2">
            <button type="button" onclick="closeModal()" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Save</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <script>
    let currentPage = 1;
    document.getElementById('addShowtime').addEventListener('click', showAddModal);
    document.getElementById('start_time').addEventListener('input', handleInputStartTime);
    function showAddModal() {
      document.getElementById('modalTitle').textContent = 'Add New Showtime';
      document.getElementById('showtimeForm').reset();
      document.getElementById('showtime_id').value = '';
      document.getElementById('showtimeModal').classList.remove('hidden');
    }

    function closeModal() {
      document.getElementById('showtimeModal').classList.add('hidden');
    }

    async function editShowtime(id) {
      const response = await axios.get(`/showtimes/${id}`, {
        headers: { 'X-Requested-With': 'XMLHttpRequest' }
      });
      console.log(response);
      if (!response.data.success) {
        showModal('Error', 'Failed to fetch showtime data');
        return;
      }
      const showtime = response.data.data;
      document.getElementById('modalTitle').textContent = 'Edit Showtime';
      document.getElementById('showtime_id').value = showtime.id;
      document.getElementById('movie_id').value = showtime.movie_id;
      document.getElementById('screen_id').value = showtime.screen_id;
      document.getElementById('start_time').value = new Date(showtime.start_time).toISOString().slice(0, 16);
      document.getElementById('end_time').value = new Date(showtime.end_time).toISOString().slice(0, 16);
      document.getElementById('price').value = showtime.price;
      document.getElementById('showtimeModal').classList.remove('hidden');
    }
    function convertToGMT7(datetimeLocalValue) {
    // Tạo đối tượng Date từ input datetime-local (giả định input là UTC)
    const localDate = new Date(datetimeLocalValue);

    // Múi giờ GMT+7 là +420 phút (7 giờ * 60 phút)
    const timezoneOffset = 7 * 60 * 60 * 1000;

    // Cộng độ lệch múi giờ để chuyển sang GMT+7
    const gmt7Date = new Date(localDate.getTime() - localDate.getTimezoneOffset() * 60000 + timezoneOffset);

    // Trả về định dạng ISO 8601 (phù hợp để gửi về server)
    return gmt7Date.toISOString();
}
  async function deleteShowtime(id) {
    try {
      const response = await axios.delete(`/showtimes/${id}`);
      if (!response) {
        showModal("Error", "There is some error deleting this showtime");
      }
      showModal("Success", "Delete showtime sucessfully");
      fetchShowtimes();
    } catch (err) {
      console.log(err);
      showModal("Error", "There is some error deleting this showtime");
    }
  }
  function changePage(page) {
      currentPage = page;
      fetchShowtimes();
    }

    async function fetchShowtimes() {
      const search = document.getElementById('search').value;
      const screen = document.getElementById('screen').value;
      const sortBy = document.getElementById('sortBy').value;
      const response = await axios.get('/showtimes', {
        params: { search, screen, sortBy, page: currentPage },
        headers: { 'X-Requested-With': 'XMLHttpRequest' }
      });
        console.log(response);
      if (response.data.success) {
        renderShowtimes(response.data.data);
        renderPagination(response.data.pagination);
      }
    }

    function getOffsetDate(date) {
      return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().slice(0,16);
    }

    function renderShowtimes(showtimes) {
      const tableBody = document.querySelector('tbody');
      tableBody.innerHTML = showtimes
        .map(
          showtime => `
            <tr>
              <td class="border px-4 py-2">${showtime.id}</td>
              <td class="border px-4 py-2">${showtime.movie_title}</td>
              <td class="border px-4 py-2">${showtime.screen_name}</td>
              <td class="border px-4 py-2">${showtime.start_time}</td>
              <td class="border px-4 py-2">${showtime.end_time}</td>
              <td class="border px-4 py-2">${showtime.price}</td>
              <td class="border px-4 py-2 space-x-2">
                <button 
                  class="px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                  onclick="editShowtime(${showtime.id})"
                >
                  Edit
                </button>
                <button 
                  class="px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                  onclick="deleteShowtime(${showtime.id})"
                >
                  Delete
                </button>
              </td>
            </tr>
          `
        )
        .join('');
    }

    function renderPagination({ current, total }) {
      const pagination = document.getElementById('pagination');
        pagination.innerHTML = Array.from({ length: total }, (_, i) => i + 1)
            .map(
            page => `
            <button
                class="px-4 py-2 border ${page === current ? 'bg-gray-300' : ''}"
                onclick="changePage(${page})"
            >
                ${page}
            </button>
            `
            )
            .join('');
    }
    function addMinutes(date, minutes) {
    const newDate = new Date(date); // Tạo bản sao của đối tượng Date
    newDate.setMinutes(newDate.getMinutes() + minutes);
    return newDate;
  }

    function handleInputStartTime(e) {
      console.log(e.target.value);
        const startTime = new Date(e.target.value);
        const duration = parseInt(document.getElementById('movie_id').selectedOptions[0].dataset.duration); //minutes
        const endTime = addMinutes(startTime, duration);
        document.getElementById('end_time').value = getOffsetDate(endTime);
    }
    async function handleSubmit(e) {
        e.preventDefault();
        const form = e.target;
        const id = form.querySelector('#showtime_id').value;
        const method = id ? 'PUT' : 'POST';
        const url = id ? `/showtimes/${id}` : '/showtimes';
        const data = new FormData(form);
        const requestBody = {
            movie_id: data.get('movie_id'),
            screen_id: data.get('screen_id'),
            start_time: convertToGMT7(data.get('start_time')),
            end_time: data.get('end_time') ? convertToGMT7(data.get('end_time')) : convertToGMT7(document.getElementById("end_time").value),
            price: data.get('price')
        }
        let response;
        try {
            if (method === 'PUT') {
                response = await axios.put(url, requestBody, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });
            } else {
                response = await axios.post(url, requestBody, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });
            }
            if (response.data.success) {
                closeModal();
                fetchShowtimes();
            } else {
                showModal('Error', response.data.message);
            }

        } catch(error) {
            alert('Failed to save showtime');
        }
    }
</script>
</div>



